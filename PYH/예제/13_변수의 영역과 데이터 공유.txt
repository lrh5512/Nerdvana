13-1
void assign(void);

int main(void)
{
	int a = 0;

	assign();
	printf("main 함수 a : %d\n", a);

	return 0;
}

void assign(void)
{
	int a;

	a = 10;
	printf("asign 함수 a : %d\n", a);
}

13-2
int main(void)
{
	int a = 10, b = 20;

	printf("교환전 a와 b의 값 : %d, %d\n", a, b);
	{
		int temp;

		temp = a;
		a = b;
		b = temp;
	}
	printf("교환 후 a와 b의 값 : %d, %d\n", a, b);

	return 0;
}

13-3
void assign10(void);
void assign20(void);

int a;

int main(void)
{
	printf("함수 호출 전 a 값 : %d\n", a);

	assign10();
	assign20();

	printf("함수 호출 후 a 값 : %d\n", a);

	return 0;
}

void assign10(void)
{
	a = 10;
}

void assign20(void)
{
	int a;

	a = 20;
}

13-4
void auto_func(void);
void static_func(void);

int main(void)
{
	int i;

	printf("일반 지역 변수(auto)를 사용한 함수...\n");
	for (i = 0; i < 3; i++)
	{
		auto_func();
	}

	printf("정적 지역 변수(static)를 사용한 함수...\n");
	for (i = 0; i < 3; i++)
	{
		static_func();
	}
	return 0;
}

void auto_func(void)
{
	int a = 0;

	a++;
	printf("%d\n", a);
}

void static_func(void)
{
	static int a;

	a++;
	printf("%d\n", a);
}

13-5
int main(void)
{
	register int i;
	int sum = 0;

	for (i = 1; i <= 10000; i++)
	{
		sum += i;
	}
	printf("%d\n", sum);

	return 0;
}

13-6
void add_ten(int a);

int main(void)
{
	int a = 10;

	add_ten(a);
	printf("a : %d\n", a);

	return 0;
}

void add_ten(int a)
{
	a = a + 10;
}

13-6 수정
int add_ten(int a);

int main(void)
{
	int a = 10;

	a = add_ten(a);
	printf("a : %d\n", a);

	return 0;
}

int add_ten(int a)
{
	a = a + 10;

	return a;
}

13-7
void add_ten(int* pa);

int main(void)
{
	int a = 10;

	add_ten(&a);
	printf("a : %d\n", a);

	return 0;
}

void add_ten(int* pa)
{
	*pa = *pa + 10;
}

13-8
int* sum(int a, int b);

int main(void)
{
	int* resp;

	resp = sum(10, 20);
	printf("두 정수의 합 : %d\n", *resp);

	return 0;
}

int* sum(int a, int b)
{
	static int res;

	res = a + b;

	return &res;
}
